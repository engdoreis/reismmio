
/*
 * This file is autogenerated by the tool reismmio.
 */

#pragma once
/* The `platform.hh` should be created and include the specific platform header which will contain the device addresses.*/
#include  "platform.hh" 
#include  "mmio.hh" 
namespace mmio {
namespace timer {

/* mtime low */
union MtimelReg { 
    reismmio::Register reg;
    /* mtime low */
    reismmio::BitField<0, 32, reismmio::Permissions::ReadWrite> value;
    constexpr MtimelReg (uintptr_t addr): reg{.addr = addr + 0x0}
    {}

    inline void commit() { reg.commit(); }

    inline MtimelReg& fetch() {
        reg.fetch();
        return *this;
    }
};



/* mtime high */
union MtimehReg { 
    reismmio::Register reg;
    /* mtime high */
    reismmio::BitField<0, 32, reismmio::Permissions::ReadWrite> value;
    constexpr MtimehReg (uintptr_t addr): reg{.addr = addr + 0x4}
    {}

    inline void commit() { reg.commit(); }

    inline MtimehReg& fetch() {
        reg.fetch();
        return *this;
    }
};



/* mtime cmp low */
union MtimecmplReg { 
    reismmio::Register reg;
    /* mtime cmp low */
    reismmio::BitField<0, 32, reismmio::Permissions::ReadWrite> value;
    constexpr MtimecmplReg (uintptr_t addr): reg{.addr = addr + 0x8}
    {}

    inline void commit() { reg.commit(); }

    inline MtimecmplReg& fetch() {
        reg.fetch();
        return *this;
    }
};



/* mtime cmp high */
union MtimecmphReg { 
    reismmio::Register reg;
    /* mtime cmp high */
    reismmio::BitField<0, 32, reismmio::Permissions::ReadWrite> value;
    constexpr MtimecmphReg (uintptr_t addr): reg{.addr = addr + 0xc}
    {}

    inline void commit() { reg.commit(); }

    inline MtimecmphReg& fetch() {
        reg.fetch();
        return *this;
    }
};



/* To facilitate compiler optimization of this abstraction, prefer using this struct within a small scope.*/
struct Timer { 
    MtimelReg mtimel;
    MtimehReg mtimeh;
    MtimecmplReg mtimecmpl;
    MtimecmphReg mtimecmph;
    
    
    constexpr Timer (platform::Timer addr):mtimel(addr),mtimeh(addr),mtimecmpl(addr),mtimecmph(addr){}
};


} // namespace timer
} // namespace mmio
